[
["index.html", "Chapter 1 Introduction", " Chapter 1 Introduction // TODO: Add introduction // TODO: What are news intensities? "],
["gettinstarted.html", "Chapter 2 Getting started 2.1 Languages 2.2 Selecting companies 2.3 Selecting commodities", " Chapter 2 Getting started This section contains general information about querying companies and commodities for both the API and the dashboard. If you have been given an API key, visit the API section. If you have been given access to the FinTxt dashboard, visit the dashboard section. 2.1 Languages FinTxt news intensity values are based on news articles. These articles are written in either one of the following languages: English French German Arabic Russian When you retrieve news intensities, you can either select one of these languages or opt to use the aggregate of all languages (‘total’). 2.2 Selecting companies When using the API or the dashboard, you should query companies by using their Reuters Instrument Code. 2.3 Selecting commodities You can query the API and dashboard for either companies or commodities (but not a mix of both). The following commodities are available: corn oats rice soybeans rapeseed wheat milk cocoa coffee cotton sugar oranges ethanol propane copper lead zinc tin aluminium nickel cobalt molybdenum steel gold platinum palladium silver rubber wool amber "],
["theapi.html", "Chapter 3 News Intensity API 3.1 Basic usage 3.2 R and Python clients", " Chapter 3 News Intensity API The FinTxt news intensity API is hosted at https://api.fintxt.io/rest. You can view the endpoints and their documentation here. The API contains four endpoints: languages: returns a list of available language for which you can query news intensities live: returns live news intensity metrics for a company or commodity and a language historic: returns historic news intensity metrics for a company or commodity, a language and a date portfolio: returns live or historic news intensity metrics for a weighted portfolio of stocks or commodities, a language and a date. The language endpoint can be queried without an API key. The historic endpoint can be queried without an API key for dates that go back beyond 30 days on the date of today. 3.1 Basic usage View the documentation for each endpoint for more information about headers and post bodies. Essentially, you can query each endpoint by building the URL. For example, you want to query the news intensity value for the commodity wool on 04-06-2018 for texts written in arabic. Your query would then look as follows: languages = &#39;arabic&#39; date = &#39;04-06-2018&#39; endpoint = &#39;historic&#39; type = &#39;commodities&#39; q = &#39;wool&#39; You could construct this request using curl: curl -X GET &quot;https://api.fintxt.io/rest/historic/commodities/arabic/04-06-2018?q=wool&quot; -H &quot;accept: application/json&quot; You could use httr in R: languages &lt;- &#39;arabic&#39; date &lt;- &#39;04-06-2018&#39; endpoint &lt;- &#39;historic&#39; type &lt;- &#39;commodities&#39; q &lt;- &#39;wool&#39; url &lt;- paste0(&quot;https://api.fintxt.io/rest/&quot;, endpoint, &quot;/&quot;, type, &quot;/&quot;, languages, &quot;/&quot;, date, &quot;?q=&quot;, q) resp &lt;- httr::GET(url) httr::content(resp) Or you could use requests in Python: import json import requests languages = &#39;arabic&#39; date = &#39;04-06-2018&#39; endpoint = &#39;historic&#39; type_ = &#39;commodities&#39; q = &#39;wool&#39; url = &quot;https://api.fintxt.io/rest/{}/{}/{}/{}?q={}&quot;.format(endpoint, type_, languages, date, q) # Send request r = requests.get(url) # Load response c = json.loads(r.content) print(c) But it would be easier to use the clients described below. 3.2 R and Python clients You can use the R and Python 3 clients to retrieve data from the API. These clients can be installed from their GitHub repositories. 3.2.1 R client Install the R client by executing devtools::install_github(&quot;FinTxt/FinTxtClient&quot;) After installing the package, register your API token by calling the following code: library(FinTxtClient) Sys.setenv(&quot;FINTXT_CLIENT_TOKEN&quot; = &quot;&lt;yourtoken&gt;&quot;) You can now access the various endpoints: # Set some variables identifiers = c(&quot;TRI.TO&quot;, &quot;IBM.N&quot;, &quot;RRD.N&quot;, &quot;SPGI.N&quot;, &quot;INTU.OQ&quot;, &quot;RELN.AS&quot;, &quot;WLSNc.AS&quot;, &quot;REL.L&quot;) weights = c(0.3, 0.1,0.05,0.05, 0.2,0.1,0.1,0.1) date = &quot;09-07-2018&quot; type = &quot;companies&quot; language = &quot;english&quot; # Load the client library(FinTxtClient) # Call the languages endpoint langs &lt;- fintxt_get_languages() # Get the live intensity for a stock one &lt;- fintxt_live_intensities_one(type = type, language = language, q = identifiers[1]) # Same but for commodity one &lt;- fintxt_live_intensities_one(type = &quot;commodities&quot;, language = language, q = &quot;milk&quot;) # Get historic intensity for a stock one &lt;- fintxt_historic_intensities_one(type = type, language = language, date = date, q=identifiers[1]) # Same but for commodity one &lt;- fintxt_historic_intensities_one(type = &quot;commodities&quot;, language = language, date = date, q=&quot;milk&quot;) # Get live intensity for a portfolio port &lt;- fintxt_live_intensities_portfolio(type = type, language = language, identifiers = c(identifiers, &quot;monkey&quot;), weights = c(weights, 0.4)) # For commodity port &lt;- fintxt_live_intensities_portfolio(type = &quot;commodities&quot;, language = language, identifiers = c(&quot;milk&quot;, &quot;soybeans&quot;), weights = c(0.5, 0.5)) # Get historic intensity for a portfolio port &lt;- fintxt_historic_intensities_portfolio(type = type, language = language, date = date, identifiers = c(identifiers, &quot;monkey&quot;), weights = c(weights, 0.4)) # For commodity port &lt;- fintxt_historic_intensities_portfolio(type = &quot;commodities&quot;, language = language, date = date, identifiers = c(&quot;milk&quot;, &quot;soybeans&quot;), weights = c(0.5, 0.5)) 3.2.2 Python client To install the python client, execute the following: pip install git+https://github.com/FinTxt/FinTxtClient-Py.git --user You can import the package as follows: from FinTxtClient import FinTxtClient Then, you can initiate the client using: client = FinTxtClient() # Optionally, pass &#39;key = &lt;your-key-here&gt;&#39; Using the client is as simple as calling the following functions: # Call the languages endpoint client.languages() # Call the live endpoint for a commodity client.live_one(&quot;commodities&quot;, &quot;english&quot;, &quot;milk&quot;) # Call the historic endpoint for a commodity and a date client.historic_one(&quot;commodities&quot;, &quot;english&quot;, &quot;13-07-2018&quot;, &quot;milk&quot;) # Call the live portfolio endpoint client.live_portfolio( _type = &quot;companies&quot;, language = &quot;english&quot;, identifiers=[&quot;TRI.TO&quot;, &quot;IBM.N&quot;, &quot;RRD.N&quot;, &quot;SPGI.N&quot;, &quot;INTU.OQ&quot;, &quot;RELN.AS&quot;, &quot;WLSNc.AS&quot;, &quot;REL.L&quot;], weights=[0.3, 0.1,0.05,0.05, 0.2,0.1,0.1,0.1]) # Call the historic portfolio endpoint client.historic_portfolio( _type = &quot;companies&quot;, language = &quot;english&quot;, date=&quot;13-07-2018&quot;, identifiers=[&quot;TRI.TO&quot;, &quot;IBM.N&quot;, &quot;RRD.N&quot;, &quot;SPGI.N&quot;, &quot;INTU.OQ&quot;, &quot;RELN.AS&quot;, &quot;WLSNc.AS&quot;, &quot;REL.L&quot;], weights=[0.3, 0.1,0.05,0.05, 0.2,0.1,0.1,0.1]) "],
["thedashboard.html", "Chapter 4 News Intensity Dashboard", " Chapter 4 News Intensity Dashboard // TODO: add information about the dashboard "],
["resources.html", "Chapter 5 Resources", " Chapter 5 Resources // TODO: add David’s research "],
["references.html", "References", " References "]
]
